name: Datagram 24/7 Multi-Node Runner

on:
  workflow_dispatch:
    inputs:
      force_restart:
        description: 'Force restart all nodes'
        required: false
        type: boolean
        default: false
      debug_mode:
        description: 'Enable debug output'
        required: false
        type: boolean
        default: true
  schedule:
    - cron: '0 */5 * * *'

env:
  NODE_VERSION: 'latest'
  RESTART_DELAY: 10
  MAX_RETRIES: 100

concurrency:
  group: datagram-${{ github.ref }}-${{ github.run_number }}
  cancel-in-progress: false

jobs:
  setup-matrix:
    name: 🔧 Setup Multi-Account Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
      total: ${{ steps.parse.outputs.total }}
      timestamp: ${{ steps.parse.outputs.timestamp }}
    steps:
      - name: Parse API Keys
        id: parse
        run: |
          set -euo pipefail
          echo "🔍 Parsing DATAGRAM_API_KEYS secret..."
          echo "════════════════════════════════════════════════"
          
          if [ -z "${DATAGRAM_API_KEYS:-}" ]; then
            echo "❌ CRITICAL ERROR: DATAGRAM_API_KEYS secret is NOT SET!"
            echo ""
            echo "📋 SETUP INSTRUCTIONS:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: DATAGRAM_API_KEYS"
            echo "4. Value format (choose one):"
            echo "   • JSON Array: [\"key1\", \"key2\", \"key3\"]"
            echo "   • Newline separated: key1<ENTER>key2<ENTER>key3"
            echo ""
            exit 1
          fi
          
          KEYS="${DATAGRAM_API_KEYS}"
          
          KEY_LENGTH=${#KEYS}
          echo "✅ Secret found (length: $KEY_LENGTH chars)"
          if [ "${{ inputs.debug_mode || 'true' }}" == "true" ]; then
            echo "🐛 DEBUG: First 10 chars: ${KEYS:0:10}..."
            echo "🐛 DEBUG: Last 10 chars: ...${KEYS: -10}"
          fi
          
          if [[ "$KEYS" == "["* ]]; then
            echo "📦 Detected format: JSON Array"
            KEYS_ARRAY="$KEYS"
            if ! echo "$KEYS_ARRAY" | jq empty 2>/dev/null; then
              echo "❌ ERROR: Invalid JSON format!"
              echo "🐛 Raw content (first 200 chars): ${KEYS:0:200}"
              exit 1
            fi
          else
            echo "📦 Detected format: Newline/Comma separated"
            KEYS_ARRAY=$(echo "$KEYS" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
            if [ "${{ inputs.debug_mode || 'true' }}" == "true" ]; then
              echo "🐛 DEBUG: Converted to JSON: $KEYS_ARRAY"
            fi
          fi
          
          COUNT=$(echo "$KEYS_ARRAY" | jq 'length')
          if [ "$COUNT" -eq 0 ]; then
            echo "❌ ERROR: No valid API keys found after parsing!"
            echo "🐛 Parsed array: $KEYS_ARRAY"
            exit 1
          fi
          echo "✅ Found $COUNT valid API key(s)"
          
          MATRIX=$(jq -n --argjson keys "$KEYS_ARRAY" '{
            include: [
              range(0; $keys | length) | {
                index: (. + 1),
                api_key: $keys[.]
              }
            ]
          }')
          
          if ! echo "$MATRIX" | jq '.include | length' &>/dev/null; then
            echo "❌ ERROR: Invalid matrix structure generated!"
            echo "🐛 Matrix: $MATRIX"
            exit 1
          fi
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          echo "matrix<<EOF" >> "$GITHUB_OUTPUT"
          echo "$MATRIX" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "total=$COUNT" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          
          echo ""
          echo "════════════════════════════════════════════════"
          echo "✅ Matrix setup completed successfully!"
          echo "📊 Total nodes to deploy: $COUNT"
          echo "════════════════════════════════════════════════"
        env:
          DATAGRAM_API_KEYS: ${{ secrets.DATAGRAM_API_KEYS }}

      - name: Validate Matrix Output
        run: |
          echo "════════════════════════════════════════════════"
          echo "📊 MATRIX VALIDATION"
          echo "════════════════════════════════════════════════"
          MATRIX='${{ steps.parse.outputs.matrix }}'
          TOTAL='${{ steps.parse.outputs.total }}'
          echo "📋 Generated Matrix:"
          echo "$MATRIX" | jq '.'
          echo ""
          echo "🔢 Total Nodes: $TOTAL"
          echo "⏰ Timestamp: ${{ steps.parse.outputs.timestamp }}"
          echo ""
          
          echo "🔍 Validating node configurations..."
          NODE_COUNT=$(echo "$MATRIX" | jq '.include | length')
          if [ "$NODE_COUNT" -ne "$TOTAL" ]; then
            echo "❌ ERROR: Mismatch between matrix length ($NODE_COUNT) and total ($TOTAL)"
            exit 1
          fi
          
          for i in $(seq 0 $((NODE_COUNT - 1))); do
            INDEX=$(echo "$MATRIX" | jq -r ".include[$i].index")
            KEY_PREVIEW=$(echo "$MATRIX" | jq -r ".include[$i].api_key" | head -c 10)
            if [ -z "$INDEX" ] || [ "$INDEX" == "null" ]; then
              echo "❌ ERROR: Node $i missing index"
              exit 1
            fi
            if [ -z "$KEY_PREVIEW" ] || [ "$KEY_PREVIEW" == "null" ]; then
              echo "❌ ERROR: Node $i missing api_key"
              exit 1
            fi
            echo "  ✓ Node #$INDEX configured (key: ${KEY_PREVIEW}...)"
          done
          
          echo ""
          echo "✅ All nodes validated successfully!"
          echo "════════════════════════════════════════════════"

  run-nodes:
    name: 🚀 Node #${{ matrix.index }}
    needs: setup-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 350
    strategy:
      max-parallel: 50
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: 🖥️ System Info
        run: |
          echo "════════════════════════════════════════════════"
          echo "🚀 DATAGRAM NODE STARTUP"
          echo "════════════════════════════════════════════════"
          echo "📍 Node Index : ${{ matrix.index }} / ${{ needs.setup-matrix.outputs.total }}"
          echo "⏰ Started at : ${{ needs.setup-matrix.outputs.timestamp }}"
          echo "🔑 API Key    : ${API_KEY:0:8}...${API_KEY: -6}"
          echo "🖥️ Runner     : $(hostname)"
          echo "🌐 Public IP  : $(curl -s ifconfig.me || echo 'N/A')"
          echo "💾 Disk Space : $(df -h / | awk 'NR==2 {print $4}') available"
          echo "🧠 Memory     : $(free -h | awk 'NR==2 {print $7}') available"
          echo "════════════════════════════════════════════════"
        env:
          API_KEY: ${{ matrix.api_key }}

      - name: 📦 Install Datagram CLI
        run: |
          set -euo pipefail
          echo "📥 Downloading Datagram CLI..."
          DOWNLOAD_URL="https://github.com/Datagram-Group/datagram-cli-release/releases/latest/download/datagram-cli-x86_64-linux"
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if wget -q --show-progress --timeout=30 "$DOWNLOAD_URL" -O datagram-cli; then
              echo "✅ Download successful"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⚠️ Download failed, retry $RETRY_COUNT/$MAX_RETRIES in 5s..."
                sleep 5
              else
                echo "❌ Download failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          sudo mv datagram-cli /usr/local/bin/datagram-cli
          sudo chmod +x /usr/local/bin/datagram-cli
          
          if command -v datagram-cli &> /dev/null; then
            echo "✅ Datagram CLI installed successfully"
            datagram-cli --version 2>/dev/null || echo "📦 Version: latest"
          else
            echo "❌ Installation verification failed"
            exit 1
          fi

      - name: 🚀 Start Node with Auto-Restart
        run: |
          set -euo pipefail
          echo "🎯 Starting Datagram Node #${{ matrix.index }}..."
          
          cleanup() {
            echo ""
            echo "═══════════════════════════════════════════════"
            echo "⚠️ SHUTDOWN SIGNAL RECEIVED"
            echo "═══════════════════════════════════════════════"
            echo "⏰ Time: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "🛑 Stopping node gracefully..."
            pkill -TERM -f datagram-cli 2>/dev/null || true
            sleep 5
            pkill -KILL -f datagram-cli 2>/dev/null || true
            echo "✅ Node stopped"
            echo "═══════════════════════════════════════════════"
            exit 0
          }
          
          trap cleanup SIGINT SIGTERM SIGHUP
          
          RESTART_COUNT=0
          TOTAL_RUNTIME=0
          
          while [ $RESTART_COUNT -lt $MAX_RETRIES ]; do
            echo ""
            echo "╔═══════════════════════════════════════════════╗"
            printf "║ ITERATION #%-3d of %-3d                        ║\n" $((RESTART_COUNT + 1)) "$MAX_RETRIES"
            echo "╚═══════════════════════════════════════════════╝"
            echo "⏰ Timestamp  : $(date '+%Y-%m-%d %H:%M:%S')"
            echo "📊 Total Runtime: $((TOTAL_RUNTIME / 3600))h $((TOTAL_RUNTIME % 3600 / 60))m"
            echo "▶️ Starting datagram-cli..."
            echo "───────────────────────────────────────────────"
            
            START_TIME=$(date +%s)
            
            timeout 5h datagram-cli run -- -key "$API_KEY" 2>&1 | while IFS= read -r line; do
              echo "[Node #${{ matrix.index }}] $line"
            done || {
              EXIT_CODE=$?
              END_TIME=$(date +%s)
              ITERATION_RUNTIME=$((END_TIME - START_TIME))
              TOTAL_RUNTIME=$((TOTAL_RUNTIME + ITERATION_RUNTIME))
              
              echo "───────────────────────────────────────────────"
              echo "⚠️ Node stopped with exit code: $EXIT_CODE"
              echo "⏱️ Iteration runtime: $((ITERATION_RUNTIME / 60))m $((ITERATION_RUNTIME % 60))s"
              
              case $EXIT_CODE in
                124)
                  echo "⏱️ Timeout reached (expected for periodic restart)"
                  ;;
                0)
                  echo "✅ Clean exit"
                  ;;
                *)
                  echo "❌ Unexpected exit. Waiting 30s before retry..."
                  sleep 30
                  ;;
              esac
            }
            
            ((RESTART_COUNT++))
            
            if [ $RESTART_COUNT -lt $MAX_RETRIES ]; then
              echo ""
              echo "⏳ Cooldown period: $RESTART_DELAY seconds..."
              sleep $RESTART_DELAY
            fi
          done
          
          echo ""
          echo "═══════════════════════════════════════════════"
          echo "🛑 MAX RESTART LIMIT REACHED ($MAX_RETRIES)"
          echo "📊 Total Runtime: $((TOTAL_RUNTIME / 3600))h $((TOTAL_RUNTIME % 3600 / 60))m"
          echo "═══════════════════════════════════════════════"
        env:
          API_KEY: ${{ matrix.api_key }}
          MAX_RETRIES: ${{ env.MAX_RETRIES }}
          RESTART_DELAY: ${{ env.RESTART_DELAY }}

  monitor:
    name: 📊 Health Monitor
    needs: [setup-matrix, run-nodes]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Report
        run: |
          echo "╔═══════════════════════════════════════════════╗"
          echo "║      DATAGRAM NODES HEALTH REPORT             ║"
          echo "╚═══════════════════════════════════════════════╝"
          echo ""
          echo "📊 Workflow Summary:"
          echo "───────────────────────────────────────────────"
          echo "🔢 Total Nodes : ${{ needs.setup-matrix.outputs.total }}"
          echo "📅 Started at  : ${{ needs.setup-matrix.outputs.timestamp }}"
          echo "⏰ Finished at : $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "📈 Job Results:"
          echo "───────────────────────────────────────────────"
          echo "✅ Success    : ${{ needs.run-nodes.result == 'success' }}"
          echo "❌ Failure    : ${{ needs.run-nodes.result == 'failure' }}"
          echo "⚠️ Cancelled  : ${{ needs.run-nodes.result == 'cancelled' }}"
          echo "⏭️ Skipped    : ${{ needs.run-nodes.result == 'skipped' }}"
          echo ""
          echo "═══════════════════════════════════════════════"
          
          if [ "${{ needs.run-nodes.result }}" == "success" ]; then
            echo "✅ All nodes completed their cycle successfully!"
            exit 0
          elif [ "${{ needs.run-nodes.result }}" == "failure" ]; then
            echo "❌ Some nodes failed. Check individual job logs for details."
            echo "💡 Common issues:"
            echo "   • Invalid API keys"
            echo "   • Network connectivity problems"
            echo "   • CLI download failures"
            exit 1
          elif [ "${{ needs.run-nodes.result }}" == "cancelled" ]; then
            echo "⚠️ Workflow was cancelled manually."
            exit 0
          else
            echo "ℹ️ Workflow status: ${{ needs.run-nodes.result }}"
            exit 0
          fi